{"ast":null,"code":"import { tap } from 'rxjs/operators';\nexport const tokenInterceptor = (req, next) => {\n  const token = localStorage.getItem('token');\n  console.log('üîó [TokenInterceptor] Interceptando request:', {\n    url: req.url,\n    method: req.method,\n    hasToken: !!token,\n    timestamp: new Date().toISOString()\n  });\n  if (token) {\n    console.log('üîë [TokenInterceptor] Agregando token Bearer a la request');\n    req = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n  return next(req).pipe(tap({\n    next: response => {\n      console.log('üì• [TokenInterceptor] Respuesta recibida:', {\n        url: req.url,\n        status: response?.status,\n        response: response,\n        timestamp: new Date().toISOString()\n      });\n    },\n    error: error => {\n      console.error('‚ùå [TokenInterceptor] Error en la request:', {\n        url: req.url,\n        error: error,\n        status: error?.status,\n        message: error?.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }));\n};","map":{"version":3,"names":["tap","tokenInterceptor","req","next","token","localStorage","getItem","console","log","url","method","hasToken","timestamp","Date","toISOString","clone","setHeaders","Authorization","pipe","response","status","error","message"],"sources":["/Users/f_orozco/Documents/INE/angular-ldap-login/angular-ldap-login/src/app/auth/token.interceptor.ts"],"sourcesContent":["import { HttpInterceptorFn } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\n\nexport const tokenInterceptor: HttpInterceptorFn = (req, next) => {\n  const token = localStorage.getItem('token');\n\n  console.log('üîó [TokenInterceptor] Interceptando request:', {\n    url: req.url,\n    method: req.method,\n    hasToken: !!token,\n    timestamp: new Date().toISOString()\n  });\n\n  if (token) {\n    console.log('üîë [TokenInterceptor] Agregando token Bearer a la request');\n    req = req.clone({ setHeaders: { Authorization: `Bearer ${token}` } });\n  }\n\n  return next(req).pipe(\n    tap({\n      next: (response) => {\n        console.log('üì• [TokenInterceptor] Respuesta recibida:', {\n          url: req.url,\n          status: (response as any)?.status,\n          response: response,\n          timestamp: new Date().toISOString()\n        });\n      },\n      error: (error) => {\n        console.error('‚ùå [TokenInterceptor] Error en la request:', {\n          url: req.url,\n          error: error,\n          status: error?.status,\n          message: error?.message,\n          timestamp: new Date().toISOString()\n        });\n      }\n    })\n  );\n};"],"mappings":"AACA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,OAAO,MAAMC,gBAAgB,GAAsBA,CAACC,GAAG,EAAEC,IAAI,KAAI;EAC/D,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3CC,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAE;IAC1DC,GAAG,EAAEP,GAAG,CAACO,GAAG;IACZC,MAAM,EAAER,GAAG,CAACQ,MAAM;IAClBC,QAAQ,EAAE,CAAC,CAACP,KAAK;IACjBQ,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;GAClC,CAAC;EAEF,IAAIV,KAAK,EAAE;IACTG,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;IACxEN,GAAG,GAAGA,GAAG,CAACa,KAAK,CAAC;MAAEC,UAAU,EAAE;QAAEC,aAAa,EAAE,UAAUb,KAAK;MAAE;IAAE,CAAE,CAAC;;EAGvE,OAAOD,IAAI,CAACD,GAAG,CAAC,CAACgB,IAAI,CACnBlB,GAAG,CAAC;IACFG,IAAI,EAAGgB,QAAQ,IAAI;MACjBZ,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAE;QACvDC,GAAG,EAAEP,GAAG,CAACO,GAAG;QACZW,MAAM,EAAGD,QAAgB,EAAEC,MAAM;QACjCD,QAAQ,EAAEA,QAAQ;QAClBP,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OAClC,CAAC;IACJ,CAAC;IACDO,KAAK,EAAGA,KAAK,IAAI;MACfd,OAAO,CAACc,KAAK,CAAC,2CAA2C,EAAE;QACzDZ,GAAG,EAAEP,GAAG,CAACO,GAAG;QACZY,KAAK,EAAEA,KAAK;QACZD,MAAM,EAAEC,KAAK,EAAED,MAAM;QACrBE,OAAO,EAAED,KAAK,EAAEC,OAAO;QACvBV,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OAClC,CAAC;IACJ;GACD,CAAC,CACH;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}