{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.api = '/api'; // Usando proxy, no necesitamos la URL completa\n  }\n  get token() {\n    return localStorage.getItem('token');\n  }\n  set token(v) {\n    if (v) localStorage.setItem('token', v);else localStorage.removeItem('token');\n  }\n  login(username, password) {\n    console.log('üîê [AuthService] Enviando solicitud de login LDAP:', {\n      username,\n      url: `${this.api}/auth/login`,\n      timestamp: new Date().toISOString()\n    });\n    return this.http.post(`${this.api}/auth/login`, {\n      username,\n      password\n    });\n  }\n  logout() {\n    this.token = null;\n  }\n  isLoggedIn() {\n    return !!this.token;\n  }\n  static {\n    this.…µfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: AuthService,\n      factory: AuthService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["inject","HttpClient","AuthService","constructor","http","api","token","localStorage","getItem","v","setItem","removeItem","login","username","password","console","log","url","timestamp","Date","toISOString","post","logout","isLoggedIn","factory","…µfac","providedIn"],"sources":["/Users/f_orozco/Documents/INE/angular-ldap-login/angular-ldap-login/src/app/auth/auth.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\ninterface LoginResponse {\n  ok: boolean;\n  token?: string;\n  user?: { username: string; dn: string; groups: string[] };\n  error?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private http = inject(HttpClient);\n  private api = '/api'; // Usando proxy, no necesitamos la URL completa\n\n  get token(): string | null {\n    return localStorage.getItem('token');\n  }\n  set token(v: string | null) {\n    if (v) localStorage.setItem('token', v);\n    else localStorage.removeItem('token');\n  }\n\n  login(username: string, password: string) {\n    console.log('üîê [AuthService] Enviando solicitud de login LDAP:', {\n      username,\n      url: `${this.api}/auth/login`,\n      timestamp: new Date().toISOString()\n    });\n    \n    return this.http.post<LoginResponse>(`${this.api}/auth/login`, { username, password });\n  }\n\n  logout() { this.token = null; }\n  isLoggedIn() { return !!this.token; }\n}"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAASC,UAAU,QAAQ,sBAAsB;;AAUjD,OAAM,MAAOC,WAAW;EADxBC,YAAA;IAEU,KAAAC,IAAI,GAAGJ,MAAM,CAACC,UAAU,CAAC;IACzB,KAAAI,GAAG,GAAG,MAAM,CAAC,CAAC;;EAEtB,IAAIC,KAAKA,CAAA;IACP,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EACA,IAAIF,KAAKA,CAACG,CAAgB;IACxB,IAAIA,CAAC,EAAEF,YAAY,CAACG,OAAO,CAAC,OAAO,EAAED,CAAC,CAAC,CAAC,KACnCF,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;EACvC;EAEAC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtCC,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAE;MAChEH,QAAQ;MACRI,GAAG,EAAE,GAAG,IAAI,CAACZ,GAAG,aAAa;MAC7Ba,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;KAClC,CAAC;IAEF,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAgB,GAAG,IAAI,CAAChB,GAAG,aAAa,EAAE;MAAEQ,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EACxF;EAEAQ,MAAMA,CAAA;IAAK,IAAI,CAAChB,KAAK,GAAG,IAAI;EAAE;EAC9BiB,UAAUA,CAAA;IAAK,OAAO,CAAC,CAAC,IAAI,CAACjB,KAAK;EAAE;;;uBAvBzBJ,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;MAAAC,UAAA,EADE;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}